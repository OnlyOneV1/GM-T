import math
from scipy.special import gamma, gammainc, gammaincc

def berelekamp_massey(bits):
    n = len(bits)
    b = [0 for x in bits]  # initialize b and c arrays
    c = [0 for x in bits]
    b[0] = 1
    c[0] = 1

    L = 0
    m = -1
    N = 0
    while (N < n):
        d = int(bits[N])
        for i in range(1, L + 1):
            d = d ^ (c[i] & int(bits[N - i]))
        if (d != 0):
            t = c[:]
            for i in range(0, n - N + m):
                c[N - m + i] = c[N - m + i] ^ b[i]
            if (L <= (N / 2)):
                L = N + 1 - L
                m = N
                b = t
        N = N + 1

    return L, c[0:L]


def LinearComplexity(bits):
    n = len(bits)
    M = 13
    K = 6
    N = int(math.floor(n / M))

    LC = list()
    for i in range(N):
        x = bits[(i * M):((i + 1) * M)]
        LC.append(berelekamp_massey(x)[0])


    a = float(M) / 2.0
    b = (((-1) ** (M + 1)) + 9.0) / 36.0
    c = ((M / 3.0) + (2.0 / 9.0)) / (2 ** M)
    u = a + b - c

    T = list()
    for i in range(N):
        x = ((-1.0) ** M) * (LC[i] - u) + (2.0 / 9.0)
        T.append(x)

    print(T)
    v = [0, 0, 0, 0, 0, 0, 0]
    for t in T:
        if t <= -2.5:
            v[0] += 1
        elif t <= -1.5:
            v[1] += 1
        elif t <= -0.5:
            v[2] += 1
        elif t <= 0.5:
            v[3] += 1
        elif t <= 1.5:
            v[4] += 1
        elif t <= 2.5:
            v[5] += 1
        else:
            v[6] += 1
    print(v)
    pi = [0.010417, 0.03125, 0.125, 0.5, 0.25, 0.0625, 0.020833]
    chisq = 0.0
    for i in range(K + 1):

        chisq += ((v[i] - (N * pi[i])) ** 2.0) / (N * pi[i])


    P = gammaincc((K / 2.0), (chisq / 2.0))

    success = (P >= 0.01)
    return success, P, None


if __name__ == "__main__":
    # bits = ['1', '0', '0', '0', '0', '0', '0', '1', '0', '1', '0', '0', '0', '1', '1', '1', '0', '1', '1', '1', '1',
    #         '1', '0', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0', '1', '1', '0', '1', '0', '1', '0',
    #         '1', '1', '1', '1', '0', '1', '0', '1', '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '1',
    #         '1', '0', '1', '1', '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '1', '1', '1',
    #         '1', '1', '1', '1', '0', '0', '0', '0', '1', '0', '0', '1', '0', '0', '0', '0', '0', '1', '1', '1', '0',
    #         '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '1',
    #         '1', '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '1', '1', '0', '0', '1', '1', '0', '1', '1',
    #         '0', '1', '1', '0', '0', '1', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1',
    #         '1', '0', '1', '1', '0', '0', '0', '1', '0', '0', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1', '0',
    #         '0',
    #         '0', '1', '0', '1', '0', '0', '1', '0', '0', '0', '1', '1', '0', '1', '0', '0', '0', '1', '0', '0', '0',
    #         '0', '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '1', '1', '0', '1', '0', '0', '0', '0', '0', '1',
    #         '1', '1', '0', '0', '1', '0', '1', '0', '1', '1', '0', '0', '0', '1', '0', '1', '1', '0', '1', '1', '1',
    #         '1', '0']
    bits='1101011110001'
    bits=list(bits)
    s1, s2, s3 = LinearComplexity(bits)
    if s1 == True:
        print("通过检测,p value is %s" % s2)
    else:
        print("未通过检测")

