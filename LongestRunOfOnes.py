import math
from scipy.special import gamma, gammainc, gammaincc

def LongestRunOfOnes(bits):
    n = len(bits)
    V = [0]*7
    pi = [0]*7
    if (n < 128):
        return 0
    if (n < 6272):
        K = 3
        M = 8
        V[0] = 1
        V[1] = 2
        V[2] = 3
        V[3] = 4
        pi[0] = 0.2148
        pi[1] = 0.3672
        pi[2] = 0.2305
        pi[3] = 0.1875
    elif (n < 750000):
        K = 5
        M = 128
        V[0] = 4
        V[1] = 5
        V[2] = 6
        V[3] = 7
        V[4] = 8
        V[5] = 9
        pi[0] = 0.1174
        pi[1] = 0.2430
        pi[2] = 0.2493
        pi[3] = 0.1752
        pi[4] = 0.1027
        pi[5] = 0.1124
    else:
        K = 6
        M = 10000
        V[0] = 10
        V[1] = 11
        V[2] = 12
        V[3] = 13
        V[4] = 14
        V[5] = 15
        V[6] = 16
        pi[0] = 0.0882
        pi[1] = 0.2092
        pi[2] = 0.2483
        pi[3] = 0.1933
        pi[4] = 0.1208
        pi[5] = 0.0675
        pi[6] = 0.0727

    N = int(n / M)
    nu = [0]*7
    print(K,M)
    for i in range(N):
        v_n_obs = 0
        run = 0

        for j in range(M):
            #print(bits[i*M+j])
            if bits[i*M+j] == "1":
                run += 1
                if run > v_n_obs:
                    v_n_obs = run
                    #print(v_n_obs)
            else:
                run = 0
        if v_n_obs < V[0]:
            nu[0]+=1
        for j in range(K+1):
            if v_n_obs == V[j]:
                nu[j]+=1
        if v_n_obs > V[K]:
            nu[K]+=1

    v = 0.0
    for i in range(K+1):
        v += ((nu[i] - N*pi[i])**2)/(N * pi[i])

    p = gammaincc(float(K)/2.0, v/2.0)
    print(p)
    success = (p >= 0.01)
    return success, p, None


def change(bits):
    new_bits = []
    n = 10**6
    N = int(n/len(bits))
    for i in range(N):
        new_bits += bits
    m = n - N*len(bits)
    new_bits += bits[:m]
    return new_bits

if __name__ == "__main__":
    # bits = ['1', '0', '0', '0', '0', '0', '0', '1', '0', '1', '0', '0', '0', '1', '1', '1', '0', '1', '1', '1', '1',
    #         '1', '0', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0', '1', '1', '0', '1', '0', '1', '0',
    #         '1', '1', '1', '1', '0', '1', '0', '1', '0', '1', '0', '0', '1', '1', '1', '0', '0', '0', '1',
    #         '1', '0', '1', '1', '0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '1', '1', '1',
    #         '1', '1', '1', '1', '0', '0', '0', '0', '1', '0', '0', '1', '0', '0', '0', '0', '0', '1', '1', '1', '0',
    #         '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '1',
    #         '1', '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '1', '1', '1', '0', '0', '1', '1', '0', '1', '1',
    #         '0', '1', '1', '0', '0', '1', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1',
    #         '1', '0', '1', '1', '0', '0', '0', '1', '0', '0', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1', '0',
    #         '0',
    #         '0', '1', '0', '1', '0', '0', '1', '0', '0', '0', '1', '1', '0', '1', '0', '0', '0', '1', '0', '0', '0',
    #         '0', '0', '0', '1', '0', '1', '1', '1', '0', '0', '0', '1', '1', '0', '1', '0', '0', '0', '0', '0', '1',
    #         '1', '1', '0', '0', '1', '0', '1', '0', '1', '1', '0', '0', '0', '1', '0', '1', '1', '0', '1', '1', '1',
    #         '1', '0']
    bits= '11001100000101010110110001001100111000000000001001001101010100010001001111010110100000001101011111001100111001101101100010110010'
    bits = list(bits)
    #bits = change(bits)
    s1, s2, s3 = LongestRunOfOnes(bits)
    if s1 == True:
        print("通过检测,p value is %s" % s2)
    else:
        print("未通过检测")